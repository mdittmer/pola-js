#include "flow-sensitive-points-to/flow-sensitive-points-to.dl"
#include "test/core/core.dl"
#include "test/flow-sensitive-points-to/parameter-access.dl"

nameFunction("f", "unknown-variable-property.js", 1, 2).
nameNode("ruv", "ReadVariableNode", "unknown-variable-property.js", 2, 9).
nameNode("rup", "ReadPropertyNode", "unknown-variable-property.js", 3, 9).
nameNode("wab", "WritePropertyNode", "unknown-variable-property.js", 2, 3).
nameNode("wac", "WritePropertyNode", "unknown-variable-property.js", 3, 3).
nameNode("rab", "ReadPropertyNode", "unknown-variable-property.js", 4, 3).
nameNode("rac", "ReadPropertyNode", "unknown-variable-property.js", 5, 3).
// `a.b = unknownVariable;`.
expectParameterAccess(f, $HeapNode($ParameterAllocation(f, "a")), $Write(), [$PropertyName($StringConstant("b"))], nil) :-
  functionByName(f, "f").
// `a.c = unknownVariable.unknownProperty;`.
expectParameterAccess(f, $HeapNode($ReadAllocation(ruv)), $Read(), [$PropertyName($StringConstant("unknownProperty"))], [$HeapNode($ReadAllocation(rup))]) :-
  functionByName(f, "f"),
  nodeByName(ruv, "ruv"),
  nodeByName(rup, "rup").
expectParameterAccess(f, $HeapNode($ParameterAllocation(f, "a")), $Write(), [$PropertyName($StringConstant("c"))], nil) :-
  functionByName(f, "f").
// `a.b;`: Identified as:
// "read `unknownVariable` result"
// or
// "result of this property read".
expectParameterAccess(f, $HeapNode($ParameterAllocation(f, "a")), $Read(), [$PropertyName($StringConstant("b"))], [$HeapNode($ReadAllocation(ruv))]) :-
  functionByName(f, "f"),
  nodeByName(ruv, "ruv").
expectParameterAccess(f, $HeapNode($ParameterAllocation(f, "a")), $Read(), [$PropertyName($StringConstant("b"))], [$HeapNode($ReadAllocation(rab))]) :-
  functionByName(f, "f"),
  nodeByName(rab, "rab").
// `a.c;`: Identified as:
// "read `unknownVariable.unknownProperty` result"
// or
// "result of this property read".
expectParameterAccess(f, $HeapNode($ParameterAllocation(f, "a")), $Read(), [$PropertyName($StringConstant("c"))], [$HeapNode($ReadAllocation(rup))]) :-
  functionByName(f, "f"),
  nodeByName(rup, "rup").
expectParameterAccess(f, $HeapNode($ParameterAllocation(f, "a")), $Read(), [$PropertyName($StringConstant("c"))], [$HeapNode($ReadAllocation(rac))]) :-
  functionByName(f, "f"),
  nodeByName(rac, "rac").

.output error
.output coreError
.output parameterAccessError

