#include "flow-sensitive-points-to/flow-sensitive-points-to.dl"
#include "test/core/core.dl"
#include "test/flow-sensitive-points-to/global-access.dl"

nameNode("ra", "ReadVariableNode", "global-invoke.js", 1, 1).
nameNode("rb", "ReadVariableNode", "global-invoke.js", 2, 9).
nameNode("cb", "CallNode", "global-invoke.js", 2, 9).

// `a()` discards result; hence `nil` next-authority for `$InvokeFunction()`
// access.
expectGlobalAccess($StackNode($Variable($DefaultGlobalScope(), "a")), $Read(), nil, [$HeapNode($ReadAllocation(ra))]) :-
  nodeByName(ra, "ra").
expectGlobalAccess($HeapNode($ReadAllocation(ra)), $InvokeFunction(), nil, nil) :-
  nodeByName(ra, "ra").
// `var x = b()` uses result; hence `[$ReturnValueNode(cb)]` next-authority for
// $InvokeFunction() access.
expectGlobalAccess($StackNode($Variable($DefaultGlobalScope(), "b")), $Read(), nil, [$HeapNode($ReadAllocation(rb))]) :-
  nodeByName(rb, "rb").
expectGlobalAccess($HeapNode($ReadAllocation(rb)), $InvokeFunction(), nil, [$ReturnValueNode(cb)]) :-
  nodeByName(rb, "rb"),
  nodeByName(cb, "cb").

.output error
.output coreError
.output globalAccessError
